
" ====
" ==== System
" ====
set nocompatible "解决新老版本插件不兼容性问题
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on "以上4行是为了让vim识别不同文件格式
set mouse= "可以使用鼠标
set encoding=utf-8 "编码
let &t_ut='' "解决有些终端配色不对问题
set clipboard=unnamedplus "使用系统剪切板
" ===
" === Main code display
" ===
syntax on  "代码高亮
set number "显示行号
set relativenumber "显示相对行号
set cursorline "光标位置显示一条线
set ruler  "显示行号和列号

" ===
" === Editor behavior
" ===
" Better tab
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2 "这几行更改tab缩进长度
set list
set listchars=tab:▸\ ,trail:▫  "这两行可以显示行尾空格
set scrolloff=5

" Prevent auto line split
set tw=0
set indentexpr=   "这几行是关于缩进的
set wrap "字不会超出我当前行所在的位置，会自动换行

" better backspace
set backspace=indent,eol,start  "让我的退格键可以回到上一行

set foldmethod=indent
set foldlevel=99      "这两行是关于把代码收起来的方式

let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

"上面这三行是让你的光标在不同模式下显示不同样式
"Cursor settings:

"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

" ===
" === Window behaviors
" ===
set splitright
set splitbelow

" ===
" === Status/command bar
" ===
set laststatus=2 "让底下的状态栏显示
set autochdir  "可以自动切换工作目录
set showcmd "显示输入的命令
set formatoptions-=tc

" Show command autocomplete
" set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu "按下tab键提供补全命令
set wildmode=longest,list,full

" Searching option
set hlsearch "显示搜索高亮
exec "nohlsearch"
set incsearch "边输入边高亮
set ignorecase "忽略大小写
set smartcase "智能大小写
set showmatch "显示匹配的括号
set paste "解决黏贴乱序问题
set ai "自动对其

" ===
" === Restore Cursor Position
" ===
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif  "打开文件让光标停留在上一次关闭的位置

" ===
" ===Basic Mappings
" ===
" Set <LEADER> as <SPACE>
let mapleader=" "

" Column (:) mod
map ; :
map q; q:
"map <LEADER>/ :!
map <LEADER>r :r !
map <LEADER>sr :%s/

" Save & quit
map Q :q<CR>
map S :w<CR>

" Copy to system clipboard
"vnoremap Y :w !xclip -i -sel c<CR>

" Search
map <LEADER><CR> :nohlsearch<CR>
noremap = nzz
noremap - Nzz

" E/D keys for 5 times k/j (faster navigation)
noremap E 5k
noremap D 5j

" Faster in-line navigation
noremap W 5w
noremap B 5b


" ===
" === Window management
" ===
" Use <space> + new arrow keys for moving the cursor around windows
map <LEADER>w <C-w>w
map <LEADER>k <C-w>k
map <LEADER>j <C-w>j
map <LEADER>h <C-w>h
map <LEADER>l <C-w>l
"map <LEADER>r <C-w>r

" Disabling the default s key
noremap s <nop>

" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)
map sk :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>
map sj :set splitbelow<CR>:split<CR>
map sh :set nosplitright<CR>:vsplit<CR>:set splitright<CR>
map sl :set splitright<CR>:vsplit<CR>

" Resize splits with arrow keys
map <LEADER><up> :res +5<CR>
map <LEADER><down> :res -5<CR>
map <LEADER><left> :vertical resize-5<CR>
map <LEADER><right> :vertical resize+5<CR>

" Place the two screens up and down
noremap sh <C-w>t<C-w>K
" Place the two screens side by side
noremap sv <C-w>t<C-w>H

" Rotate screens
noremap srh <C-w>b<C-w>K
noremap srv <C-w>b<C-w>H


" ===
" === Tab management
" ===
" Create a new tab with tu
map tc :tabe<CR>
" Move around tabs with tn and ti
map tn :+tabnext<CR>
map tp :-tabnext<CR>
" Move the tabs with tmn and tmi
map tmn :+tabmove<CR>
map tmp :-tabmove<CR>

" Spelling Check with <space>sc
map <LEADER>sc :set spell!<CR>
noremap <C-x> ea<C-x>s
inoremap <C-x> <Esc>ea<C-x>s

" Press ` to change case (instead of ~)
map ` ~

call plug#begin('~/.vim/plugged')
Plug 'https://github.com/connorholyday/vim-snazzy'
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'Valloric/YouCompleteMe'
Plug 'https://github.com/preservim/nerdtree'
call plug#end()

let g:SnazzyTransparent = 1
colorscheme snazzy

" ===
" === You Complete ME
" ===
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_use_clangd = 0
let g:ycm_python_interpreter_path = "/usr/bin/python3"
let g:ycm_python_binary_path = "/usr/bin/python3"

" ===
" === NERDTRee
" ===
map tt :NERDTreeToggle<CR>
"let NERDTreeMapOpenExpl = ""
"let NERDTreeMapUpdir = ""
"let NERDTreeMapUpdirKeepOpen = "l"
"let NERDTreeMapOpenSplit = ""
"let NERDTreeOpenVSplit = ""
"let NERDTreeMapActivateNode = "i"
"let NERDTreeMapOpenInTab = "o"
"let NERDTreeMapPreview = ""
"let NERDTreeMapCloseDir = "n"
"let NERDTreeMapChangeRoot = "y"
